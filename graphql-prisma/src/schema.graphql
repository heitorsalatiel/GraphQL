    type Query {
        users(query: String):[User!]!
        posts:[Post!]!
        postsByFilter(query: String!):[Post!]!
        myPosts(query: String):[Post!]!
        comments: [Comment!]!
        post(id: ID!):  Post!
        me:User!
    }

    type Mutation {

        createUser (data: CreateUserInput): AuthPayload!
        deleteUser:User!
        updateUser(data:UpdateUserInput): User!

        createPost(data: CreatePostInput): Post!
        deletePost(id: ID!): Post!
        updatePost (id:ID!, data:UpdatePostInput):Post!

        createComment(data:CreateCommentInput) : Comment!
        deleteComment(id: ID!): Comment!
        updateComment(id:ID!, data:UpdateCommentInput):Comment!

        login(email: String!, password: String!): AuthPayload!
    }

    type Subscription {
        comment(postId:ID!): CommentSubscriptionPayload!
        post:PostSubscriptionPayload!
    }

    type AuthPayload {
        token: String!
        user:User!
    }

    input CreateUserInput {
        name: String!
        email: String!
        password: String!
        age: Int
    }

    input UpdateUserInput {
        name: String
        email: String
        age: Int
    }

    type User{
        id: ID!
        name: String!
        email: String!
        password: String!
        age: Int
        posts:[Post!]!
        comments:[Comment!]!
    }

    input CreatePostInput{
        title: String!
        body: String!
        published: Boolean!
    }

    input UpdatePostInput {
        title: String
        body: String
        published: Boolean
    }

    type Post {
        id: ID
        title: String!
        body: String!
        published: Boolean!
        author: User!
        comments:[Comment!]!
    }

    input CreateCommentInput {
        text: String!
        post: ID!
    }

    input UpdateCommentInput {
        text: String
    }

    type Comment {
        id: ID!
        text: String!
        author: User!
        post: Post!
    }

    type Teste {
        id: ID!
        name: String!
    }

    enum MutationType {
        CREATED
        DELETED
        UPDATED
    }

    type PostSubscriptionPayload {
        mutation: MutationType!
        node: Post
    }

    type CommentSubscriptionPayload{
        mutation: MutationType!
        node: Comment
    }
    